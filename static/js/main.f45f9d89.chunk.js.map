{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","snowOptions","animationData","snowfall","sunnyOptions","sunny","mistOptions","mist","rainOptions","rain","cloudsOptions","clouds","weatherDesc","main","className","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","options","style","visibility","window","innerWidth","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yPASMA,EACA,mCADAA,EAEC,0CAyHQC,MAtHf,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,KAwCRC,EAAc,CACnBC,cAAeC,GAEVC,EAAe,CACpBF,cAAeG,GAEVC,EAAc,CACnBJ,cAAeK,GAEVC,EAAc,CACnBN,cAAeO,GAEVC,EAAgB,CACrBR,cAAeS,GAGZC,EAAqC,oBAAhBb,EAAQc,KAAsBd,EAAQA,QAAQ,GAAGc,KAAO,GAEjF,OACC,yBACCC,UACwB,oBAAhBf,EAAQc,KACZd,EAAQc,KAAKE,KAAO,GACnB,WACA,WACD,OAGJ,8BACC,yBAAKD,UAAU,cACd,2BACCE,KAAK,OACLF,UAAU,aACVG,YAAY,YACZC,SAAU,SAACC,GAAD,OAAOrB,EAASqB,EAAEC,OAAOC,QACnCA,MAAOxB,EACPyB,WAxEU,SAACC,GACA,SAAXA,EAAIC,KACPC,MAAM,GAAD,OAAI/B,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACxDgC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACN7B,EAAW6B,GACX/B,EAAS,WAsEc,oBAAhBC,EAAQc,KACf,6BACC,yBAAKC,UAAU,gBACd,yBAAKA,UAAU,YACbf,EAAQ+B,KADV,KACkB/B,EAAQgC,IAAIC,SAE9B,yBAAKlB,UAAU,QAvED,SAACmB,GACpB,IAgBIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAlBS,CACZ,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAMkBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAiDNE,CAAY,IAAIC,QAExC,yBAAK7B,UAAU,eACd,yBAAKA,UAAU,QAAQ8B,KAAKC,MAAM9C,EAAQc,KAAKE,MAA/C,SACA,yBAAKD,UAAU,WAAWf,EAAQA,QAAQ,GAAGc,OAG9C,kBAAC,IAAD,CACCiC,QACiB,UAAhBlC,EACGR,EACgB,SAAhBQ,EACAX,EACgB,SAAhBW,EACAN,EACgB,WAAhBM,EACAF,EACgB,SAAhBE,EACAJ,EACA,GAEJuC,MAAO,CAACC,WAAYC,OAAOC,WAAa,IAAM,UAAY,aAI5D,wBAAIpC,UAAU,aAAd,qBCjHeqC,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f45f9d89.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport Lottie from 'react-lottie';\r\n\r\nimport snowfall from './assets/snowfall.json';\r\nimport sunny from './assets/sunny.json';\r\nimport mist from './assets/mist.json';\r\nimport rain from './assets/rain.json';\r\nimport clouds from './assets/clouds.json';\r\n\r\nconst api = {\r\n\tkey: '2bfeaabdca00f9f2e594409eff15fb98',\r\n\tbase: 'http://api.openweathermap.org/data/2.5/',\r\n};\r\n\r\nfunction App() {\r\n\tconst [query, setQuery] = useState('');\r\n\tconst [weather, setWeather] = useState({});\r\n\r\n\tconst search = (evt) => {\r\n\t\tif (evt.key == 'Enter') {\r\n\t\t\tfetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\r\n\t\t\t\t.then((res) => res.json())\r\n\t\t\t\t.then((result) => {\r\n\t\t\t\t\tsetWeather(result);\r\n\t\t\t\t\tsetQuery('');\r\n\t\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tconst dateBuilder = (d) => {\r\n\t\tlet months = [\r\n\t\t\t'January',\r\n\t\t\t'February',\r\n\t\t\t'March',\r\n\t\t\t'April',\r\n\t\t\t'May',\r\n\t\t\t'June',\r\n\t\t\t'July',\r\n\t\t\t'August',\r\n\t\t\t'September',\r\n\t\t\t'October',\r\n\t\t\t'November',\r\n\t\t\t'December',\r\n\t\t];\r\n\t\tlet days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\n\t\tlet day = days[d.getDay()];\r\n\t\tlet date = d.getDate();\r\n\t\tlet month = months[d.getMonth()];\r\n\t\tlet year = d.getFullYear();\r\n\r\n\t\treturn `${day} ${date} ${month} ${year}`;\r\n\t};\r\n\r\n\tconst snowOptions = {\r\n\t\tanimationData: snowfall,\r\n\t};\r\n\tconst sunnyOptions = {\r\n\t\tanimationData: sunny,\r\n\t};\r\n\tconst mistOptions = {\r\n\t\tanimationData: mist,\r\n\t};\r\n\tconst rainOptions = {\r\n\t\tanimationData: rain,\r\n\t};\r\n\tconst cloudsOptions = {\r\n\t\tanimationData: clouds,\r\n\t};\r\n\r\n\tlet weatherDesc = typeof weather.main != 'undefined' ? weather.weather[0].main : '';\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={\r\n\t\t\t\ttypeof weather.main != 'undefined'\r\n\t\t\t\t\t? weather.main.temp > 20\r\n\t\t\t\t\t\t? 'app warm'\r\n\t\t\t\t\t\t: 'app cold'\r\n\t\t\t\t\t: 'app'\r\n\t\t\t}\r\n\t\t>\r\n\t\t\t<main>\r\n\t\t\t\t<div className=\"search-box\">\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tclassName=\"search-bar\"\r\n\t\t\t\t\t\tplaceholder=\"Search...\"\r\n\t\t\t\t\t\tonChange={(e) => setQuery(e.target.value)}\r\n\t\t\t\t\t\tvalue={query}\r\n\t\t\t\t\t\tonKeyPress={search}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{typeof weather.main != 'undefined' ? (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<div className=\"location-box\">\r\n\t\t\t\t\t\t\t<div className=\"location\">\r\n\t\t\t\t\t\t\t\t{weather.name}, {weather.sys.country}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"date\">{dateBuilder(new Date())}</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"weather-box\">\r\n\t\t\t\t\t\t\t<div className=\"temp\">{Math.round(weather.main.temp)}Â°C</div>\r\n\t\t\t\t\t\t\t<div className=\"weather\">{weather.weather[0].main}</div>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<Lottie\r\n\t\t\t\t\t\t\toptions={\r\n\t\t\t\t\t\t\t\tweatherDesc === 'Clear'\r\n\t\t\t\t\t\t\t\t\t? sunnyOptions\r\n\t\t\t\t\t\t\t\t\t: weatherDesc === 'Snow'\r\n\t\t\t\t\t\t\t\t\t? snowOptions\r\n\t\t\t\t\t\t\t\t\t: weatherDesc === 'Mist'\r\n\t\t\t\t\t\t\t\t\t? mistOptions\r\n\t\t\t\t\t\t\t\t\t: weatherDesc === 'Clouds'\r\n\t\t\t\t\t\t\t\t\t? cloudsOptions\r\n\t\t\t\t\t\t\t\t\t: weatherDesc === 'Rain'\r\n\t\t\t\t\t\t\t\t\t? rainOptions\r\n\t\t\t\t\t\t\t\t\t: ''\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tstyle={{visibility: window.innerWidth < 392 ? 'visible' : 'hidden'}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<h1 className=\"not-found\">City not found</h1>\r\n\t\t\t\t)}\r\n\t\t\t</main>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}